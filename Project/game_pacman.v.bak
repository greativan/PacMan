module game_pacman(
	CLOCK_50,
	KEY,
	SW,
	HEX0,
	VGA_R,
	VGA_G,
	VGA_B,
	VGA_HS,
	VGA_VS,
	VGA_BLANK_N,
	VGA_SYNC_N,
	VGA_CLK
);

	input 		CLOCK_50;
	input [3:0]	KEY;
	input [3:0]	SW;
	output[6:0]	HEX0;
	/* These outputs drive the VGA display. The VGA_CLK is also used to clock the FSM responsible for
	 * controlling the data transferred to the DAC driving the monitor. */
	output[7:0] VGA_R;
	output[7:0] VGA_G;
	output[7:0] VGA_B;
	output		VGA_HS;
	output		VGA_VS;
	output		VGA_BLANK_N;
	output		VGA_SYNC_N;
	output		VGA_CLK;

	reg		[6:0]	HEX0;
	reg		[3:0]	KEY_p=0;		//输出定义为寄存器类型
	reg		[3:0]	KEY_q=0;		//比KEY_d2延时一个时钟
	reg		[3:0]	KEY_d1=0;		//比KEY延时一个时钟
	reg		[3:0]	KEY_d2=0;		//按键的延时去抖之后的存储寄存器
	reg		[29:0]	cnt_100hz=0;	//分频计数器
	reg				clk_100hz=0;	//分频时钟	
//	reg		[29:0]	cnt_4hz=0;		//分频计数器
//	reg				clk_4hz=0;		//分频时钟	
	
	reg		[3:0]	score=0;

	always@(posedge CLOCK_50) begin
		if(cnt_100hz<250000)		//外部时钟是50M，进行1000000分频就是20ms的方波，所以半个周期就是500000.
			cnt_100hz<=cnt_100hz+1;	//计数器加1
		else begin					//如果计时器达到500000，则clock_20ms进行翻转，同时计数器清零
			clk_100hz<=~clk_100hz;
			cnt_100hz<=0;
		end
	end

//	always@(posedge CLOCK_50) begin
//		if(KEY !=4'b1111)
//			cnt_4hz<=0;
//		else if(cnt_4hz<12500000)		//外部时钟是50M，进行1000000分频就是20ms的方波，所以半个周期就是500000.
//			cnt_4hz<=cnt_4hz+1;	//计数器加1
//		else begin					//如果计时器达到500000，则clock_20ms进行翻转，同时计数器清零
//			clk_4hz<=~clk_4hz;
//			cnt_4hz<=0;
//		end
//	end	
	
	always@(posedge clk_100hz)	begin
		KEY_d1<=KEY;				//KEY是当前采样值，KEY_d1是上次采样值
		KEY_d2<=KEY | KEY_d1;		//如果当前采样值和上次采样值都为低才是低
	end
	always@(posedge CLOCK_50)	begin
		KEY_q<=KEY_d2;				//KEY_d2是当前的边沿检测的输入，KEY_q是上个时钟的边沿检测的输入，
		KEY_p<=~KEY_d2 & KEY_q;	//如果上次信号输入是高电平，这次输入是低电平，表示下降沿来临。
	end

	reg   [2:0]	colour=0;	
	reg	  [8:0] x=0; 
	reg   [7:0] y=0;	
	reg	  [8:0] man_x=160;
	reg	  [7:0] man_y=180;
	
	reg	  [8:0] bean_x=160;
	reg	  [7:0] bean_y=120;
	
	reg	  [8:0] obstacle_x=150;
	reg	  [7:0] obstacle_y=70;	
	reg	  [8:0] WITCH_obstacle=80;
	reg	  [7:0] HIGH_obstacle=40;
	
	reg	  [7:0] random_cnt=0;	
	reg	  		over=0;

	always@(posedge CLOCK_50)begin
		if(random_cnt<149)
			random_cnt<=random_cnt+1;
		else
			random_cnt<=0;
	end
	
	always@(posedge CLOCK_50)begin
		if(man_x==bean_x && man_y==bean_y)begin
			if(score<9)begin
				score<=score+1;
				if(random_cnt>=35 && random_cnt<=38)begin
					bean_x<=((random_cnt+40)%15+1)*20;
					bean_y<=((random_cnt+40)/15+1)*20;
				end
				else if(random_cnt>=50 && random_cnt<=53)begin
					bean_x<=((random_cnt+45)%15+1)*20;
					bean_y<=((random_cnt+45)/15+1)*20;
				end
				else begin
					bean_x<=(random_cnt%15+1)*20;
					bean_y<=(random_cnt/15+1)*20;
				end			
			end
			else begin
				score<=0;
				bean_x<=160;
				bean_y<=120;				
			end
		end
	end	

	always@(posedge CLOCK_50)begin
		if(KEY_p[0]==1)begin
			if(man_x==(obstacle_x-WITCH_obstacle/2-10) &&((man_y==obstacle_y-10)||(man_y==obstacle_y+10)))begin
				man_x<=man_x;
			end			
			else if(man_x<300)begin
				man_x<=man_x+20;
			end
			else begin
				man_x<=300;
			end
		end
		else if(KEY_p[1]==1)begin
			if(man_x==(obstacle_x+WITCH_obstacle/2+10) &&((man_y==obstacle_y-10)||(man_y==obstacle_y+10)))begin
				man_x<=man_x;
			end			
			else if(man_x>20)begin
				man_x<=man_x-20;
			end
			else begin
				man_x<=20;
			end
		end
		else if(KEY_p[2]==1)begin
			if(man_y==(obstacle_y+HIGH_obstacle/2+10) &&((man_x==obstacle_x-10)||(man_x==obstacle_x+10) || (man_x==obstacle_x-30) || (man_x==obstacle_x+30)))begin
				man_y<=man_y;
			end			
			else if(man_y>20)begin
				man_y<=man_y-20;
			end
			else begin
				man_y<=20;
			end
		end
		else if(KEY_p[3]==1)begin
			if(man_y==(obstacle_y-HIGH_obstacle/2-10) &&((man_x==obstacle_x-10)||(man_x==obstacle_x+10) || (man_x==obstacle_x-30) || (man_x==obstacle_x+30)))begin
				man_y<=man_y;
			end			
			else if(man_y<220)begin
				man_y<=man_y+20;
			end
			else begin
				man_y<=220;
			end
		end					
	end
	
	always@(posedge CLOCK_50)begin
		if(x<319)begin
			x<=x+1;
		end
		else if(y<239)begin
			x<=0;
			y<=y+1;
		end
		else begin
			x<=0;
			y<=0;			
		end
	end
	
	always@(posedge CLOCK_50)begin
//		if((x-man_x)*(x-man_x)+(y-man_y)*(y-man_y)==BIG_man*BIG_man)
		if(((x-man_x)*(x-man_x)+(y-man_y)*(y-man_y))<=100)
			colour<=3'b100;
		else if((x-bean_x)*(x-bean_x)+(y-bean_y)*(y-bean_y)<=25)
			colour<=3'b010;
		else if((x>=obstacle_x-WITCH_obstacle/2 && x<=obstacle_x+WITCH_obstacle/2)&&(y>=obstacle_y-HIGH_obstacle/2 && y<=obstacle_y+HIGH_obstacle/2))
			colour<=3'b111;
		else if(x>=10 && x<=310 && (y==10 || y==230))
			colour<=3'b111;
		else if((y>=10 && y<=230 && (x==10 || x==310)))
			colour<=3'b111;
		else
			colour<=3'b000;
	end

	always @(*)begin
		case(score)				//七段译码	
	//---------------------------------数字-----------------------------------//	
			4'h0:HEX0=7'b1000000;	//显示0
			4'h1:HEX0=7'b1111001;	//显示1
			4'h2:HEX0=7'b0100100;	//显示2
			4'h3:HEX0=7'b0110000;	//显示3
			4'h4:HEX0=7'b0011001;	//显示4
			4'h5:HEX0=7'b0010010;	//显示5
			4'h6:HEX0=7'b0000010;	//显示6
			4'h7:HEX0=7'b1111000;	//显示7
			4'h8:HEX0=7'b0000000;	//显示8
			4'h9:HEX0=7'b0011000;	//显示9
	//---------------------------------字符-----------------------------------//		
			4'ha:HEX0=7'b0001000;	//显示a
			4'hb:HEX0=7'b0000011;	//显示b
			4'hc:HEX0=7'b1000110;	//显示c
			4'hd:HEX0=7'b0100001;	//显示d
			4'he:HEX0=7'b0000110;	//显示e
			4'hf:HEX0=7'b0001110;	//显示f
			default:HEX0=7'b1111111;//不显示
		endcase
	end

vga_adapter u1(
			.resetn(1'b1),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x), 
			.y(y),
			.plot(1'b1),
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));

endmodule
	